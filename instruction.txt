1) Описание. Данный REST-сервис спроектирван c использавнием среды разработки Intellij IDEA, Maven, SpringBoot, JpaRepository, PostgreSQL, и статического сервера Node.js(express), для имитации сайта, для удобства  уменьшения кода применен плагин Lombok и Bootstrap

2) Проект состоит из двух папок: серверной части (statistics) и сервера для раздачи страниц (static-server).

Для запуска серверной части необходимо запустить Intellij IDEA, если не установлен плагин Lombok, дополнительно его установить, на машине так же необходимы быть установлены фреймворк сбоки Maven и БД PostgreSQL.
В файле application.properties прописаны данные для подключения к БД (на своуй машине необходимо поменять
на свои)

Для запуска статического сервера по раздаче страниц на машине необходим быть установлен Node.js. С помощью командной консоли запускаем сервер, набираем команду node server.js. При запуске сервера в компндной консоли появится сообщение Server started(значит сервер запущен)

3) Для реализации сервера и получения результатов, в браузере набираем адрес http://localhost/results.html
(на данной странице мы будем получать результаты по кол-ву посещений и кол-ву уникальных пользователей за текущие сутки). Отправка и получение данных происходит с помощью ajax запроса.
Для получения результата кол-ву посещений, кол-ву уникальных пользователей, кол-ву регулярных пользователей за указанный период в браузере набираем адрес http://localhost/resultsForPeriod.html. На странице находятся поля для ввода даты и времени начала и окончания периода и поля для отображения результатов. Отправка и получение данных происходит с помощью ajax запроса.
Для имитации страниц сайта созданы 11 страниц(page1.html...page11.html) с фиксацией посещения пользователя (по условию регулярный пользователь считается, если он посетил не менее менее 10 различных страниц).
Для выбора любой страницы в браузере вводим, например, http://localhost/page1.html, попадаем на первую страницу.
Фиксация страницы происходит с помощью ajax запроса, если запрос происходит успешно и пользователь занесён в БД, то появляется alert с сообщением "Спасибо, что посители наш сайт!)". Информация о пользователе и посещении хранится для удобства(по моему мнению) в двух разных таблицах(информация о посещении с внешней ссылкой на пользователя). Для оптимизации под высокую нагрузку основное взаимодествие между backend и frontend происходим асинхронно. Комментарии в коде есть


 